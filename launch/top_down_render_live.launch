<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <arg name="simulation" default="False"/>
  <arg name="image_seg" default="False"/>
  <arg name="bagfile" default=""/>
  <arg name="output" default="screen"/>

  <group if="$(eval len(arg('bagfile')) > 0)">
    <include file="$(find top_down_render)/launch/record.launch">
      <arg name="bagpath" value="$(arg bagfile)"/>
    </include>
  </group>

  <node name="top_down_render" pkg="top_down_render" type="top_down_render_node" output="$(arg output)">
    <remap from="~/pc" to="/lidar_rgb_calib/painted_pc"/>
    <remap from="~/gt_pose" to="/unity_ros/husky/TrueState/pose"/>
    <remap from="~/map_image" to="/iapetus/asoom/map_sem_img"/>
    <remap from="~/map_loc" to="/iapetus/asoom/map_sem_img_center"/>
    <param name="raster_res" value="1"/>
    <param name="particle_count" value="300"/>

    <rosparam command="load" subst_value="True" file="$(find top_down_render)/config/live_map.yaml"/>

    <param name="use_motion_prior" value="True"/>
    <param name="filter_pos_cov" value="0.02"/>
    <param name="filter_theta_cov" value="0.002"/>
    <param name="filter_regularization" value="0.7"/>
    <param name="out_of_bounds_const" value="3"/>

    <remap from="~/pose_est" to="/upslam/sem_pose" />
    <remap from="~/motion_prior" to="/upslam/integrated_pose"/>
  </node>

  <group if="$(eval arg('simulation'))">
    <include file="$(find depth_atlas)/launch/mapper.launch">
      <arg name="lidar_width" value="256"/>
      <arg name="lidar_height" value="32"/>
    </include>
  </group>
  <group if="$(eval not arg('simulation'))">
    <include file="$(find depth_atlas)/launch/mapper.launch" pass_all_args="true"/>
  </group>

  <group if="$(eval arg('image_seg'))">
    <include file="$(find image_folder_sync)/launch/image_folder_sync.launch"/>
  </group>

  <group if="$(eval not arg('simulation') and not arg('image_seg'))">
    <include file="$(find inference)/launch/inference.launch" pass_all_args="true"/>
  </group>

  <group if="$(eval arg('simulation'))">
    <node pkg="tf2_ros" type="static_transform_publisher" name="gt"
      args="0 0 0 0 0 0 husky/TrueState husky/base"/> 
  </group>

  <node pkg="tf2_ros" type="static_transform_publisher" name="world_map" args="0 0 0 0 0 0 1 world map" />
</launch>
